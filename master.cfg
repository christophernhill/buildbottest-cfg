#
# Buildbot control starts from master.cfg. The control is specified in
# python by populating a dictionary variable called "BuildMasterConfig".
# By convention the BuildMasterConfig is associated with a variable "c"
# to save typing!
#
# Some key things it defines are the master setup, the worker setup,
# the builders, factory configurations and a schedule for running tests.
#
# The master setup is the overall controlling program that 
#  1. launches builders on workers according to some schedule
#     or event
#   - and -
#  2. gathers builder results and provides a web tool for viewing
#  3. defines "factories" that are a sequence of commands defining a test
#     script. Factories are mapped to "workers" to execute.
#
#  A "builder" in buildbot is a handle to some pieces of code that can be run and checked
#  for success. It can support any manner of test as needed. Each builder launches
#  one "type" of test.
#  Builders are specfied in an array labelled "builders" that is part of the
#  BuildMasterConfig dictionary. Each builders array entry holds a 
#  builder data structure defining a particular "builder".
#
#  A worker in buildbot is a separate computer resource instance that runs "builder"
#  tests in response to requests from the master. The workers can be manually started
#  or there is a way to create "latent" workers that start on demand.
#  Workers are defined much like builders i.e. as an array in the BuildMasterConfig
#  dictionary (called "workers") with each array element containing a worker
#  datastructure.
#
#  A factory in buildbot specifies the squence of programs/script steps that
#  a certain test will execute. Factories are defined by creating a factory
#  data structure and are then added to builder definitions that are part
#  of the BuildMasterConfig dictionary.
#

import os

from buildbot.plugins import *
